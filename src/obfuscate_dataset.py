import base64
import ember
import random
import numpy as np

# Load the ember dataset
X_train, y_train, X_test, y_test = ember.read_vectorized_features("/ember/ember2018/")



# Function to obfuscate strings using base64 encoding
def obfuscate_strings(data):
    for i, file_data in enumerate(data):
        if 'string_features' in file_data:
            strings = file_data['string_features']
            obfuscated_strings = [base64.b64encode(s.encode()).decode() for s in strings]
            data[i]['string_features'] = obfuscated_strings
    return data

# Apply string obfuscation
X_train_obfuscated = obfuscate_strings(X_train)
X_test_obfuscated = obfuscate_strings(X_test)

# Simulate opcode control flow obfuscation
def obfuscate_opcodes(data):
    for i, file_data in enumerate(data):
        if 'byte_histogram' in file_data:  # Assuming opcodes are embedded here
            opcodes = file_data['byte_histogram']
            random.shuffle(opcodes)  # Shuffle opcodes to simulate obfuscation
            data[i]['byte_histogram'] = opcodes
    return data

# Apply opcode obfuscation
X_train_obfuscated = obfuscate_opcodes(X_train_obfuscated)
X_test_obfuscated = obfuscate_opcodes(X_test_obfuscated)

# Opcode substitution to obscure instructions
def substitute_opcodes(data, substitution_map):
    for i, file_data in enumerate(data):
        if 'byte_histogram' in file_data:
            opcodes = file_data['byte_histogram']
            substituted_opcodes = [substitution_map.get(op, op) for op in opcodes]
            data[i]['byte_histogram'] = substituted_opcodes
    return data

# Example substitution map: mapping certain common opcodes to others
substitution_map = {0x90: 0x91, 0xC3: 0xC2}  # Example: replace NOP (0x90) with XCHG (0x91)

# Apply opcode substitution
X_train_obfuscated = substitute_opcodes(X_train_obfuscated, substitution_map)
X_test_obfuscated = substitute_opcodes(X_test_obfuscated, substitution_map)

# Save the obfuscated dataset
np.save("output/X_train_obfuscated.npy", X_train_obfuscated)
np.save("output/y_train.npy", y_train)  # Labels remain unchanged

np.save("output/X_test_obfuscated.npy", X_test_obfuscated)
np.save("output/y_test.npy", y_test)  # Labels remain unchanged